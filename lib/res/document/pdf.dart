import 'dart:io';

import 'package:flutter/services.dart';
import 'package:open_file/open_file.dart';
import 'package:path_provider/path_provider.dart';
import 'package:pdf/pdf.dart';
import 'package:pdf/widgets.dart' as pw;
import 'package:printing/printing.dart';
import 'package:flutter/material.dart';



class MonthlyStatement {
  final String name;
  final String Date;
  final String Remark;
  final String contact;
  final String category;
  final String mode;
  final double cashin;
  final double cashout;
  final double balance;
  final String time;
  final String month;
  final String year;
  final String email;
  // final double serviceFee;
  // final double gst;
  // final double tips;
  // final double refund;
  // final int numberOfJobs;

  MonthlyStatement({
    required this.name,
    required this.Date,
    required this.Remark,
    required this.contact,
    required this.category,
    required this.mode,
    required this.cashin,
    required this.cashout,
    required this.balance,
    required this.time,
    required this.month,
    required this.year,
    required this.email,
    // required this.serviceFee,
    // required this.gst,
    // required this.tips,
    // required this.refund,
    // required this.numberOfJobs,
  });
}

Future<void> printStatementPdf(BuildContext context, MonthlyStatement statement) async {
  try {
    final ByteData fontData = await rootBundle.load('assets/fonts/Outfit/static/Outfit-Regular.ttf');
    final ttf = pw.Font.ttf(fontData.buffer.asByteData());

    final image = pw.MemoryImage(
      (await rootBundle.load('assets/images/adsphoto.png')).buffer.asUint8List(),
    );

    final doc = pw.Document();

    doc.addPage(pw.Page(
      pageFormat: PdfPageFormat.a4,
      build: (pw.Context context) {
        return pw.ListView(
          children: [
            pw.Container(
              padding: pw.EdgeInsets.only(top: 1),
              child: pw.Column(
                crossAxisAlignment: pw.CrossAxisAlignment.start,
                mainAxisAlignment: pw.MainAxisAlignment.start,
                children: [
                  pw.Row(
                    children:[
                      pw.Image(image, width: 40),
                      pw.Column(
                        crossAxisAlignment: pw.CrossAxisAlignment.start,
                        children: [
                          pw.Text("Cashbook Report" ,style: pw.TextStyle(font: ttf)),
                          pw.Text("Generated On-${statement.month},${statement.time},Generated by-${statement.name}\n(${statement.email})" ,style: pw.TextStyle(font: ttf))
                        ]

                      )
                    ]
                  ),
                  pw.Text("Generated by CashBook App." ),
                  // pw.SizedBox(height: 30),
                  pw.Text(statement.name, style: pw.TextStyle(font: ttf)),
                  pw.Text(statement.phone, style: pw.TextStyle(font: ttf)),
                  pw.Text(statement.email, style: pw.TextStyle(font: ttf)),
                  pw.SizedBox(height: 30),
                  pw.Row(
                    children: [
                      pw.Text(statement.month, style: pw.TextStyle(font: ttf, fontSize: 20, fontWeight: pw.FontWeight.bold)),
                      pw.SizedBox(width: 10),
                      pw.Text(statement.year, style: pw.TextStyle(font: ttf, fontSize: 20, fontWeight: pw.FontWeight.bold)),
                    ],
                  ),
                  pw.Text("Monthly statement", style: pw.TextStyle(font: ttf, color: PdfColors.grey)),
                  pw.SizedBox(height: 20),
                  pw.Row(
                    mainAxisAlignment: pw.MainAxisAlignment.spaceBetween,
                    children: [
                      pw.Text("TOTAL EARNINGS", style: pw.TextStyle(font: ttf, color: PdfColors.grey, fontSize: 30, fontWeight: pw.FontWeight.bold)),
                      pw.Text("\$${statement.totalEarning}", style: pw.TextStyle(font: ttf, fontSize: 30, fontWeight: pw.FontWeight.bold)),
                    ],
                  ),
                  pw.SizedBox(height: 30),
                  pw.Text("Earnings breakdown", style: pw.TextStyle(font: ttf, fontSize: 22, fontWeight: pw.FontWeight.bold, decoration: pw.TextDecoration.underline)),
                  pw.SizedBox(height: 20),
                  pw.Row(children: [pw.SizedBox(width: 120, child: pw.Text("Moving cost", style: pw.TextStyle(font: ttf))), pw.Text("\$${statement.movingCost}")]),
                  pw.Row(children: [pw.SizedBox(width: 120, child: pw.Text("Travel cost", style: pw.TextStyle(font: ttf))), pw.Text("\$${statement.travelCost}")]),
                  pw.Row(children: [pw.SizedBox(width: 120, child: pw.Text("Service fee", style: pw.TextStyle(font: ttf))), pw.Text("\$${statement.serviceFee}")]),
                  pw.Row(children: [pw.SizedBox(width: 120, child: pw.Text("GST", style: pw.TextStyle(font: ttf))), pw.Text("\$${statement.gst}")]),
                  pw.Row(children: [pw.SizedBox(width: 120, child: pw.Text("Tips", style: pw.TextStyle(font: ttf))), pw.Text("\$${statement.tips}")]),
                  pw.Row(children: [pw.SizedBox(width: 120, child: pw.Text("Refunds", style: pw.TextStyle(font: ttf))), pw.Text("\$${statement.refund}")]),
                  pw.SizedBox(height: 30),
                  pw.Text("Total jobs this month: ${statement.numberOfJobs}", style: pw.TextStyle(font: ttf)),
                  pw.SizedBox(height: 50),
                  pw.Text(
                    "THIS IS NOT AN OFFICIAL INVOICE OR TAX DOCUMENT",
                    style: pw.TextStyle(font: ttf, fontSize: 16, color: PdfColors.grey),
                  ),
                ],
              ),
            ),
          ],
        );
      },
    ));

    final directory = Platform.isIOS
        ? await getApplicationDocumentsDirectory()
        : await getDownloadsDirectory();

    if (directory == null) {
      ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text("Document directory not available")));
      return;
    }

    final filePath = '${directory.path}/statement-${statement.month}-${statement.year}.pdf';
    final file = File(filePath);
    await file.writeAsBytes(await doc.save());
    OpenFile.open(filePath);
  } catch (e) {
    debugPrint("Error generating PDF: $e");
    ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text("Error: $e")));
  }
}
